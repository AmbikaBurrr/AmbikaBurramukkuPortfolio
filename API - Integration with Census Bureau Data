{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"M6-vbL007FiQ"},"outputs":[],"source":["import requests\n","import pandas as pd\n","\n","# Define your API key (replace 'YOUR_API_KEY' with your actual key)\n","API_KEY = \"c2dd948c8b3261d077ec1f88af26ef0dfa4ffda9\""]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XNETH2VlhnN7","executionInfo":{"status":"ok","timestamp":1733258694669,"user_tz":360,"elapsed":71000,"user":{"displayName":"AMBIKA BURRAMUKKU","userId":"00359009035614632889"}},"outputId":"d19d7fb8-da2e-4f95-c3ed-b7e9744d3e2b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fetching data for year 2012...\n","Fetching data for year 2013...\n","Fetching data for year 2014...\n","Fetching data for year 2015...\n","Fetching data for year 2016...\n","Fetching data for year 2017...\n","Fetching data for year 2018...\n","Fetching data for year 2019...\n","Fetching data for year 2020...\n","Error fetching data for B19013_001E in 2020: 404\n","Response content: <!doctype html><html lang=\"en\"><head><title>HTTP Status 404 ? Not Found</title><style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 ? Not Found</h1></body></html>\n","Error fetching data for B01001_001E in 2020: 404\n","Response content: <!doctype html><html lang=\"en\"><head><title>HTTP Status 404 ? Not Found</title><style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 ? Not Found</h1></body></html>\n","Error fetching data for B25009_001E in 2020: 404\n","Response content: <!doctype html><html lang=\"en\"><head><title>HTTP Status 404 ? Not Found</title><style type=\"text/css\">body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}</style></head><body><h1>HTTP Status 404 ? Not Found</h1></body></html>\n","Skipping year 2020 due to missing data.\n","Fetching data for year 2021...\n","Fetching data for year 2022...\n","                       NAME B19013_001E B01001_001E B25009_001E  Year\n","0       Abilene city, Texas       41197      118881       42756  2012\n","1          Akron city, Ohio       32645      198551       83193  2012\n","2      Alafaya CDP, Florida       60305       85334       28014  2012\n","3  Alameda city, California       74860       75632       30582  2012\n","4      Albany city, Georgia       28461       79150       29597  2012\n"]}],"source":["# Define the tables we want to query\n","income_table = \"B19013_001E\"\n","age_sex_table = \"B01001_001E\"\n","housing_table = \"B25009_001E\"\n","\n","# Define the geography level (for example, US national level or by state, county, etc.)\n","geography = \"place:*\"  # This gets place-level data for all cities/towns\n","\n","# Base URL for ACS API (1-year estimates)\n","BASE_URL = \"https://api.census.gov/data/\"\n","\n","# Function to make API calls for each table for a specific year\n","def get_census_data(table_id, geography, api_key, year):\n","    # Construct the API URL\n","    url = f\"{BASE_URL}{year}/acs/acs1?get=NAME,{table_id}&for={geography}&key={api_key}\"\n","\n","    # Send the GET request\n","    response = requests.get(url)\n","\n","    # Check for a successful response (status code 200)\n","    if response.status_code == 200:\n","        try:\n","            data = response.json()  # Try parsing JSON\n","            # Return the data as a DataFrame, skipping the header row\n","            return pd.DataFrame(data[1:], columns=data[0])  # Data is in data[1:], header is data[0]\n","        except ValueError as e:\n","            print(f\"Error parsing JSON response for {table_id} in {year}: {e}\")\n","            print(f\"Response content: {response.text}\")\n","            return None\n","    else:\n","        print(f\"Error fetching data for {table_id} in {year}: {response.status_code}\")\n","        print(f\"Response content: {response.text}\")\n","        return None\n","\n","# Collect data from 2012-2022\n","years = [str(year) for year in range(2012, 2023)]  # 2012 to 2022\n","all_data = []\n","\n","for year in years:\n","    print(f\"Fetching data for year {year}...\")\n","\n","    # Get data for each table for the current year\n","    income_data = get_census_data(income_table, geography, API_KEY, year)\n","    age_sex_data = get_census_data(age_sex_table, geography, API_KEY, year)\n","    housing_data = get_census_data(housing_table, geography, API_KEY, year)\n","\n","    # Check if any data is None (i.e., if any API request failed)\n","    if any(data is None for data in [income_data, age_sex_data, housing_data]):\n","        print(f\"Skipping year {year} due to missing data.\")\n","        continue\n","\n","    # Clean up data by removing unnecessary columns (keep only the relevant ones)\n","    income_data = income_data[[\"NAME\", income_table]]\n","    age_sex_data = age_sex_data[[\"NAME\", age_sex_table]]\n","    housing_data = housing_data[[\"NAME\", housing_table]]\n","\n","    # Merge data on the NAME column\n","    combined_data = pd.merge(income_data, age_sex_data, on=\"NAME\", how=\"outer\", suffixes=('_income', '_age_sex'))\n","    combined_data = pd.merge(combined_data, housing_data, on=\"NAME\", how=\"outer\", suffixes=('_age_sex', '_housing'))\n","\n","    # Add the year column to track the year of the data\n","    combined_data['Year'] = year\n","\n","    # Append the data for the year to the list\n","    all_data.append(combined_data)\n","\n","# Concatenate all the data for the years into one DataFrame\n","final_data = pd.concat(all_data, ignore_index=True)\n","\n","# Display the final data\n","print(final_data.head())\n"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":27,"status":"ok","timestamp":1733258694670,"user":{"displayName":"AMBIKA BURRAMUKKU","userId":"00359009035614632889"},"user_tz":360},"id":"LGh3pZ-tSaFT","colab":{"base_uri":"https://localhost:8080/"},"outputId":"629e18bb-a6b7-443b-f5bb-8a4fc3e2f5ad"},"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['City_State', 'Median_Income', 'Population', 'Housing_Ownership',\n","       'Year'],\n","      dtype='object')\n"]}],"source":["# Rename the columns for clarity\n","final_data = final_data.rename(columns={\n","    'B19013_001E': 'Median_Income',  # Rename 'B19013_001E' to 'Median_Income'\n","    'B01001_001E': 'Population',     # Rename 'B01001_001E' to 'Population'\n","    'B25009_001E': 'Housing_Ownership', # Rename 'B25009_001E' to 'Housing_Ownership'\n","    'NAME': 'City_State',            # Rename 'NAME' to 'City_State\n","})\n","\n","# Print the updated column names to verify\n","print(final_data.columns)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":21,"status":"ok","timestamp":1733258694670,"user":{"displayName":"AMBIKA BURRAMUKKU","userId":"00359009035614632889"},"user_tz":360},"id":"YwZaYOvnGRGA","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b38171ec-5b4f-425b-da4d-ec3d12fa6122"},"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['City_State', 'Median_Income', 'Population', 'Housing_Ownership',\n","       'Year'],\n","      dtype='object')\n"]}],"source":["print(final_data.columns)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tUVs9BpbDRuO"},"outputs":[],"source":["# Specify the file path for the CSV file\n","output_file = \"census_data_2012_2022.csv\"\n","\n","# Export the updated DataFrame to a CSV file\n","final_data.to_csv(output_file, index=False)"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}